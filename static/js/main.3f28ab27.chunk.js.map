{"version":3,"sources":["Loader/Loader.js","Table/Table.js","DetailRowView/DetailRowView.js","ModeSelector/ModeSelector.js","TableSearch/TableSearch.js","AddingForm/AddingForm.js","App.js","serviceWorker.js","index.js"],"names":["className","props","triangleBySort","sort","icon","faCaretUp","faCaretDown","triangleDown","onClick","onSort","bind","sortField","data","map","item","key","id","phone","onRowSelect","firstName","lastName","email","person","useState","closeUserInfo","setCloseUserInfo","HideInfoBtn","type","showInfoBtn","userData","address","description","streetAddress","city","state","zip","style","display","justifyContent","padding","onSelect","value","setValue","onSubmit","e","preventDefault","onSearch","onFormSubmit","placeholder","aria-label","aria-describedby","onChange","target","trim","openPanel","setOpenPanel","setId","setFirstName","setLastName","setEmail","setPhone","addNewUserToTable","submitNewUserData","onInput","App","isModeSelected","isLoading","row","currentPage","search","clonedData","concat","_","orderBy","setState","pageChangeHandler","selected","modeSelectHandler","url","fetchData","searchHandler","oldData","newData","fetch","response","json","this","filter","toLowerCase","includes","filteredData","getFilteredData","pageCount","Math","ceil","length","displayData","chunk","TableSearch","AddingForm","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","forcePage","DetailRowView","ModeSelector","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f28ab27.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Loader.css'\r\n\r\nexport default () => (\r\n    <div className=\"loader-wrap\">\r\n        <div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n    </div>\r\n)","import React from 'react'\r\nimport './Table.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretUp, faCaretDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nexport default props => {\r\n    const triangleBySort = props.sort === 'asc'\r\n        ? <small><FontAwesomeIcon icon={faCaretUp} /></small>\r\n        : <small><FontAwesomeIcon icon={faCaretDown} /></small>\r\n\r\n    const triangleDown = <small><FontAwesomeIcon icon={faCaretDown} /></small>\r\n\r\n    return (\r\n        <table className='table table-bordered'>\r\n            <thead>\r\n                <tr>\r\n                    <th onClick={props.onSort.bind(null, 'id')} >\r\n                        id {props.sortField === 'id' ? triangleBySort : triangleDown}\r\n                    </th>\r\n                    <th onClick={props.onSort.bind(null, 'firstName')}>\r\n                        firstName {props.sortField === 'firstName' ? triangleBySort : triangleDown}\r\n                    </th>\r\n                    <th onClick={props.onSort.bind(null, 'lastName')}>\r\n                        lastName {props.sortField === 'lastName' ? triangleBySort : triangleDown}\r\n                    </th>\r\n                    <th onClick={props.onSort.bind(null, 'email')}>\r\n                        email {props.sortField === 'email' ? triangleBySort : triangleDown}\r\n                    </th>\r\n                    <th onClick={props.onSort.bind(null, 'phone')}>\r\n                        phone {props.sortField === 'phone' ? triangleBySort : triangleDown}\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.data && props.data.map(item => (\r\n                    <tr\r\n                        key={item.id + item.phone}\r\n                        onClick={props.onRowSelect.bind(null, item)}>\r\n                        <td>{item.id}</td>\r\n                        <td>{item.firstName}</td>\r\n                        <td>{item.lastName}</td>\r\n                        <td>{item.email}</td>\r\n                        <td>{item.phone}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}","import React, { useState } from 'react'\r\n\r\nexport default ({ person }) => {\r\n\r\n    const [closeUserInfo, setCloseUserInfo] = useState(true)\r\n\r\n    const HideInfoBtn = <button\r\n        type=\"button\"\r\n        className=\"btn btn-danger mb-3\"\r\n        onClick={() => setCloseUserInfo(false)}>\r\n        Close\r\n        </button>\r\n\r\n    const showInfoBtn = <button\r\n        type=\"button\"\r\n        className=\"btn btn-primary mb-3\"\r\n        onClick={() => setCloseUserInfo(true)}>\r\n        Open\r\n        </button>\r\n\r\n    const userData = (person.address && person.description)\r\n        ? (\r\n            <div>\r\n                <p>Selected User <b>{person.firstName} {person.lastName}</b></p>\r\n                <p><b>Description: </b>{person.description}</p>\r\n                <p>Address: <b>{person.address.streetAddress}</b></p>\r\n                <p>City: <b>{person.address.city}</b></p>\r\n                <p>State: <b>{person.address.state}</b></p>\r\n                <p>Zip: <b>{person.address.zip}</b></p>\r\n                {HideInfoBtn}\r\n            </div>\r\n        )\r\n        : (\r\n            <div>\r\n                <p>Selected User <b>{person.firstName} {person.lastName}</b></p>\r\n                <p><b>No detailed data</b></p>\r\n                {HideInfoBtn}\r\n            </div>\r\n        )\r\n\r\n    const displayUserData = closeUserInfo\r\n        ? userData\r\n        : showInfoBtn\r\n\r\n    return displayUserData\r\n}","import React from 'react'\r\n\r\nexport default props => {\r\n    \r\n    const smallUrl = `https://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`\r\n\r\n    const bigUrl = `https://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`\r\n\r\n    return (\r\n        <div style={{display: 'flex', justifyContent: 'center', padding: '50px'}}>\r\n            <button onClick={() => props.onSelect(smallUrl)} className=\"btn btn-success\">32 users</button>\r\n            <button onClick={() => props.onSelect(bigUrl)} className=\"btn btn-danger\">1000 users</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react'\r\n\r\nexport default props => {\r\n\r\n    const [value, setValue] = useState('')\r\n\r\n    const valueChangeHandler = e => {\r\n        setValue(e.target.value.trim())\r\n    }\r\n    const onFormSubmit = e => {\r\n        e.preventDefault()\r\n        props.onSearch(value)\r\n    }\r\n\r\n    return (\r\n        <form className=\"input-group mb-3 mt-3\"\r\n            onSubmit={(e) => onFormSubmit(e)}>\r\n            <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Text for search...\"\r\n                aria-label=\"Text for search...\"\r\n                aria-describedby=\"button-addon2\"\r\n                value={value}\r\n                onChange={valueChangeHandler} />\r\n            <div className=\"input-group-append\">\r\n                <button\r\n                    className=\"btn btn-outline-secondary\"\r\n                    id=\"button-addon2\">\r\n                    Search\r\n                    </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\n\r\n\r\nexport default props => {\r\n    const [openPanel, setOpenPanel] = useState(true)\r\n    const [id, setId] = useState('')\r\n    const [firstName, setFirstName] = useState('')\r\n    const [lastName, setLastName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n\r\n    const submitNewUserData = (e) => {\r\n        e.preventDefault()\r\n        if (id && firstName && lastName && email && phone) {\r\n            props.addNewUserToTable(id, firstName, lastName, email, phone)\r\n            setOpenPanel(true)\r\n            setId('')\r\n            setFirstName('')\r\n            setLastName('')\r\n            setEmail('')\r\n            setPhone('')\r\n        }\r\n    }\r\n\r\n    const cancelNewUserData = () => {\r\n        setOpenPanel(true)\r\n        setId('')\r\n        setFirstName('')\r\n        setLastName('')\r\n        setEmail('')\r\n        setPhone('')\r\n    }\r\n\r\n    const addNewPersonBtn = <button\r\n        className=\"btn btn-primary mb-3\"\r\n        onClick={() => setOpenPanel(false)}>\r\n        Add New Persone\r\n        </button>\r\n\r\n    const addNewPersonForm = <form onSubmit={(e) => submitNewUserData(e)}>\r\n        <table className='table table-bordered'>\r\n            <thead>\r\n                <tr>\r\n                    <th >id </th>\r\n                    <th >firstName</th>\r\n                    <th >lastName</th>\r\n                    <th >email</th>\r\n                    <th >phone</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <input\r\n                            type=\"number\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"id\"\r\n                            onInput={(e) => setId(e.target.value)} /></td>\r\n                    <td>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"First name\"\r\n                            onInput={(e) => setFirstName(e.target.value)} /></td>\r\n                    <td>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Last name\"\r\n                            onInput={(e) => setLastName(e.target.value)} /></td>\r\n                    <td>\r\n                        <input\r\n                            type=\"email\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"email\"\r\n                            onInput={(e) => setEmail(e.target.value)} /></td>\r\n                    <td>\r\n                        <input\r\n                            type=\"tel\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"phone\"\r\n                            onInput={(e) => setPhone(e.target.value)} /></td>\r\n                </tr>\r\n\r\n            </tbody>\r\n        </table>\r\n        <button type=\"submit\" className=\"btn btn-primary mb-3\">Add Persone</button>\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger mb-3 ml-3\"\r\n            onClick={() => cancelNewUserData()}>\r\n            Cancel\r\n                </button>\r\n    </form>\r\n\r\n    const AddingFormContent = openPanel\r\n        ? addNewPersonBtn\r\n        : addNewPersonForm\r\n\r\n\r\n    return (\r\n        AddingFormContent\r\n    )\r\n}","import React, { Component } from 'react'\nimport Loader from './Loader/Loader'\nimport Table from './Table/Table'\nimport DetailRowView from './DetailRowView/DetailRowView'\nimport ModeSelector from './ModeSelector/ModeSelector'\nimport ReactPaginate from 'react-paginate'\nimport TableSearch from './TableSearch/TableSearch'\nimport _ from 'lodash'\nimport AddingForm from './AddingForm/AddingForm'\n\nclass App extends Component {\n\n  state = {\n    isModeSelected: false,\n    isLoading: false,\n    data: [],\n    sort: 'asc', // desc\n    sortField: 'id',\n    row: null,\n    currentPage: 0,\n    search: ''\n  }\n\n  async fetchData(url) {\n    const response = await fetch(url)\n    const data = await response.json()\n\n    this.setState({\n      isLoading: false,\n      data: _.orderBy(data, this.state.sortField, this.state.sort)\n    })\n  }\n\n  onSort = (sortField) => {\n    const clonedData = this.state.data.concat()\n    const sort = this.state.sort === 'asc' ? 'desc' : 'asc'\n    const data = _.orderBy(clonedData, sortField, sort)\n    this.setState({ data, sort, sortField })\n  }\n\n  onRowSelect = (row) => {\n    this.setState({ row })\n  }\n\n  pageChangeHandler = ({ selected }) => {\n    this.setState({\n      currentPage: selected\n    })\n  }\n\n  modeSelectHandler = (url) => {\n    this.setState({\n      isModeSelected: true,\n      isLoading: true,\n    })\n\n    this.fetchData(url)\n  }\n\n  searchHandler = (search) => {\n    this.setState({\n      search,\n      currentPage: 0\n    })\n  }\n\n  getFilteredData() {\n    const { data, search } = this.state\n\n    if (!search) {\n      return data\n    }\n    return data.filter(item => {\n      return item['firstName'].toLowerCase().includes(search.toLowerCase())\n        || item['lastName'].toLowerCase().includes(search.toLowerCase())\n        || item['email'].toLowerCase().includes(search.toLowerCase())\n    })\n  }\n\n  addNewUserToTable = (id, firstName, lastName, email, phone) => {\n    const oldData = this.state.data\n    const newData = {id, firstName, lastName, email, phone}\n    this.setState({data: [newData, ...oldData]})\n  }\n\n  render() {\n    const pageSize = 50\n    const filteredData = this.getFilteredData()\n    const pageCount = Math.ceil(filteredData.length / pageSize)\n    const displayData = _.chunk(filteredData, pageSize)[this.state.currentPage]\n\n\n    if (!this.state.isModeSelected) {\n      return (\n        <div className=\"container\">\n          <ModeSelector onSelect={this.modeSelectHandler} />\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"container\">\n        {\n          this.state.isLoading\n            ? <Loader />\n            : <>\n              <TableSearch\n                onSearch={this.searchHandler} />\n              <AddingForm\n                addNewUserToTable={this.addNewUserToTable} />\n              <Table\n                data={displayData}\n                onSort={this.onSort}\n                sort={this.state.sort}\n                sortField={this.state.sortField}\n                onRowSelect={this.onRowSelect} />\n            </>\n        }\n\n        {\n          this.state.data.length > pageSize\n            ? <ReactPaginate\n              previousLabel={'<'}\n              nextLabel={'>'}\n              breakLabel={'...'}\n              breakClassName={'break-me'}\n              pageCount={pageCount}\n              marginPagesDisplayed={2}\n              pageRangeDisplayed={5}\n              onPageChange={this.pageChangeHandler}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              pageClassName='page-item'\n              pageLinkClassName='page-link'\n              previousClassName='page-item'\n              previousLinkClassName='page-link'\n              nextClassName='page-item'\n              nextLinkClassName='page-link'\n              forcePage={this.state.currentPage}\n            />\n            : null\n        }\n\n        {\n          this.state.row\n            ? <DetailRowView person={this.state.row} />\n            : null\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}